from telegram import Update, ChatMember, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
from logging.handlers import RotatingFileHandler
import os
from telegram.error import TelegramError
from datetime import datetime
import pytz
import json
from dotenv import load_dotenv
import sys


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –û–±—ã—á–Ω—ã–µ –ª–æ–≥–∏
file_handler = RotatingFileHandler(
    'logs/bot.log',
    maxBytes=1024 * 1024,  # 1 MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)

# –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
error_handler = RotatingFileHandler(
    'logs/error.log',
    maxBytes=1024 * 1024,  # 1 MB
    backupCount=5,
    encoding='utf-8'
)
error_handler.setFormatter(formatter)
error_handler.setLevel(logging.ERROR)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(error_handler)
logger.addHandler(console_handler)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º:
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
NEWS_CHANNEL_ID = f"@{os.getenv('NEWS_CHANNEL_NAME')}"
ADMIN_IDS = os.getenv('ADMIN_IDS', '').split(',')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, CHANNEL_ID, NEWS_CHANNEL_ID, ADMIN_IDS]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

USERS_FILE = 'data/users.json'
UZB_TIMEZONE = pytz.timezone('Asia/Tashkent')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('data'):
    os.makedirs('data')

def get_uzb_time():
    return datetime.now(UZB_TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": [], "total_count": 0}

def save_user(user_data):
    users_info = load_users()
    if not any(user["id"] == user_data["id"] for user in users_info["users"]):
        user_data["joined_date"] = get_uzb_time()
        users_info["users"].append(user_data)
        users_info["total_count"] = len(users_info["users"])
        
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_info, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user_data.get('username', '–ë–µ–∑ username')}")

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        user_id = update.effective_user.id
        member = await context.bot.get_chat_member(chat_id=NEWS_CHANNEL_ID, user_id=user_id)
        status = member.status
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")
        return status in ['member', 'administrator', 'creator']
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def get_sub_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ MaxFilms", url=f"https://t.me/your_channel_name")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = {
        "id": user.id,
        "username": user.username or "–ë–µ–∑ username",
        "first_name": user.first_name,
        "last_name": user.last_name or "",
        "joined_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_user(user_data)
    
    if not await check_subscription(update, context):
        await update.message.reply_text(
            "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∏–Ω–æ!\n\n"
            "üí´ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥:\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª MaxFilms\n\n"
            "üéÅ –í –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–µ–º—å–µ—Ä—ã —Ñ–∏–ª—å–º–æ–≤\n"
            "‚Ä¢ –¢–æ–ø–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã\n"
            "‚Ä¢ –ü–æ–¥–±–æ—Ä–∫–∏ –ª—É—á—à–∏—Ö —Ñ–∏–ª—å–º–æ–≤\n\n"
            "üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞!",
            reply_markup=await get_sub_keyboard()
        )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∏–Ω–æ–±–æ—Ç!\n\n"
        "üé¨ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–ª—å–º–∞–º –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Ñ–∏–ª—å–º–∞, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º —Ñ–∏–ª—å–º –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "üîç ID —Ñ–∏–ª—å–º–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @channel_name"
    )
    await update.message.reply_text(welcome_text)

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post or update.edited_channel_post:
        message = update.channel_post or update.edited_channel_post
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: {message.message_id}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.bot_data['last_message'] = message
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message.message_id}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    message_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id not in ADMIN_IDS:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        is_subscribed = await check_subscription(update, context)
        if not is_subscribed:
            await update.message.reply_text(
                "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!\n\n"
                "üí´ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–ª—å–º–∞–º –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ:\n"
                "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª MaxFilms\n\n"
                "üéÅ –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –∏ –∫—Ä—É—Ç—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏!",
                reply_markup=await get_sub_keyboard()
            )
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∫–æ–º–∞–Ω–¥—É kod
    if user_id in ADMIN_IDS and message_text.lower() == "kod":
        if 'last_message' in context.bot_data:
            last_message = context.bot_data['last_message']
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {last_message.message_id}")
            admin_text = (
                "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
                f"üìç ID: {last_message.message_id}\n"
                "‚¨áÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:"
            )
            await update.message.reply_text(admin_text)
            await context.bot.copy_message(
                chat_id=update.effective_chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=last_message.message_id
            )
        else:
            logger.error("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await update.message.reply_text("‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        film_id = int(message_text)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Ñ–∏–ª—å–º —Å ID: {film_id}")
        
        try:
            await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∏–ª—å–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await context.bot.copy_message(
                chat_id=update.effective_chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=film_id - 1
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º
            await context.bot.copy_message(
                chat_id=update.effective_chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=film_id
            )
            
            await update.message.reply_text("‚úÖ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞: {e}")
            error_text = (
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID\n"
                "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ\n"
                "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            await update.message.reply_text(error_text)
            
    except ValueError:
        if message_text.lower() != "kod":
            help_text = (
                "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞ (ID).\n\n"
                "üîç ID —Ñ–∏–ª—å–º–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–∏–ª—å–º—É –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @channel_name\n"
                "üìù –ü—Ä–∏–º–µ—Ä: 123"
            )
            await update.message.reply_text(help_text)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        return
    
    users_info = load_users()
    admin_help_text = (
        "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "üìä /users - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üîç kod - –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
        f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_info['total_count']}"
    )
    await update.message.reply_text(admin_help_text)

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        return
    
    users_info = load_users()
    users_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_info['total_count']}\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users_info['users'][-1]['joined_date'] if users_info['users'] else '–ù–µ—Ç'}"
    )
    await update.message.reply_text(users_text)

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        (filters.UpdateType.CHANNEL_POST | filters.UpdateType.EDITED_CHANNEL_POST),
        handle_channel_post
    ))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()